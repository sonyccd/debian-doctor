name: CI/CD Pipeline

# Workflow Behavior:
# - Pull Requests: Run tests + build (no deployments)
# - Push to main/master: Run tests + build + auto-release to GitHub + publish Snap to edge channel
# - Tagged push (v*): Run tests + build + create GitHub release + publish Snap to stable channel

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Run tests
        run: |
          go mod download
          go test -v -race -coverprofile=coverage.txt ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          fail_ci_if_error: false

  build:
    name: Build Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
            build_deb: true
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
            build_deb: false
          - goos: linux
            goarch: arm
            goarm: 7
            suffix: linux-armv7
            build_deb: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          BINARY_NAME=debian-doctor-${{ matrix.suffix }}
          
          go build -ldflags="-s -w -X main.version=${VERSION}" \
            -o ${BINARY_NAME} .
          
          # Create checksums
          sha256sum ${BINARY_NAME} > ${BINARY_NAME}.sha256
          
          # Compress binary (except Windows)
          if [[ "${{ matrix.goos }}" != "windows" ]]; then
            tar czf ${BINARY_NAME}.tar.gz ${BINARY_NAME}
            sha256sum ${BINARY_NAME}.tar.gz > ${BINARY_NAME}.tar.gz.sha256
          fi

      - name: Build Debian package
        if: matrix.build_deb == true
        run: |
          # Install dpkg-dev and build-essential for package building
          sudo apt-get update
          sudo apt-get install -y dpkg-dev build-essential
          
          # Copy binary for packaging
          cp debian-doctor-${{ matrix.suffix }} debian-doctor
          
          # Build the debian package
          dpkg-buildpackage -us -uc -b
          
          # Move the package to current directory
          mv ../debian-doctor_*.deb .
          
          # Create checksum for the deb package and prepare artifacts
          mkdir -p artifacts
          for debfile in debian-doctor_*.deb; do
            if [ -f "$debfile" ]; then
              sha256sum "$debfile" > "$debfile.sha256"
              cp "$debfile" "$debfile.sha256" artifacts/
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debian-doctor-${{ matrix.suffix }}
          path: |
            debian-doctor-${{ matrix.suffix }}
            debian-doctor-${{ matrix.suffix }}.sha256
            debian-doctor-${{ matrix.suffix }}.tar.gz
            debian-doctor-${{ matrix.suffix }}.tar.gz.sha256
            artifacts/
          retention-days: 7

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -type f -exec mv {} release/ \;
          ls -la release/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "First release" > CHANGELOG.md
          else
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi
          
          cat CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Automated release on push to main (without tag)
  auto-release:
    name: Auto Release on Main
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for Go changes
        id: check_changes
        run: |
          # Check if any Go files changed in the last commit
          CHANGED=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(go|mod|sum)$' || true)
          if [ -n "$CHANGED" ]; then
            echo "GO_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "GO_CHANGED=false" >> $GITHUB_OUTPUT
          fi

      - name: Get next version
        id: next_version
        if: steps.check_changes.outputs.GO_CHANGED == 'true'
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Parse version numbers
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Download all artifacts
        if: steps.check_changes.outputs.GO_CHANGED == 'true'
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare release files
        if: steps.check_changes.outputs.GO_CHANGED == 'true'
        run: |
          mkdir -p release
          find artifacts -type f -exec mv {} release/ \;
          ls -la release/

      - name: Generate release notes
        if: steps.check_changes.outputs.GO_CHANGED == 'true'
        id: release_notes
        run: |
          VERSION=${{ steps.next_version.outputs.NEW_VERSION }}
          DATE=$(date +'%Y-%m-%d')
          
          cat > RELEASE_NOTES.md << EOF
          ## Debian Doctor $VERSION - $DATE
          
          ### Automated Release
          
          This is an automated release triggered by changes to Go files in the main branch.
          
          ### Recent Changes
          
          EOF
          
          # Add recent commits
          git log --pretty=format:"- %s (%an)" -n 10 >> RELEASE_NOTES.md
          
          echo "" >> RELEASE_NOTES.md
          echo "### Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### Snap Package (Recommended)" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "sudo snap install debian-doctor" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "#### Binary Download" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "# AMD64 (Intel/AMD 64-bit)" >> RELEASE_NOTES.md
          echo "wget https://github.com/\$GITHUB_REPOSITORY/releases/download/$VERSION/debian-doctor-linux-amd64.tar.gz" >> RELEASE_NOTES.md
          echo "tar xzf debian-doctor-linux-amd64.tar.gz" >> RELEASE_NOTES.md
          echo "sudo mv debian-doctor-linux-amd64 /usr/local/bin/debian-doctor" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "# ARM64 (Raspberry Pi 4, etc.)" >> RELEASE_NOTES.md  
          echo "wget https://github.com/\$GITHUB_REPOSITORY/releases/download/$VERSION/debian-doctor-linux-arm64.tar.gz" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md

      - name: Create tag and release
        if: steps.check_changes.outputs.GO_CHANGED == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.next_version.outputs.NEW_VERSION }}
          name: Debian Doctor ${{ steps.next_version.outputs.NEW_VERSION }}
          body_path: RELEASE_NOTES.md
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-snap:
    name: Build Snap Package
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version for snap
        id: snap_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            # Remove 'v' prefix if present for snap
            VERSION=${VERSION#v}
          else
            VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "1.0.0")
            VERSION=${VERSION#v}
            # Add timestamp for dev builds
            VERSION="${VERSION}-$(date +%Y%m%d%H%M%S)"
          fi
          echo "SNAP_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building snap version: $VERSION"

      - name: Update snapcraft.yaml version
        run: |
          sed -i "s/version: '1.0.0'/version: '${{ steps.snap_version.outputs.SNAP_VERSION }}'/" snap/snapcraft.yaml
          cat snap/snapcraft.yaml

      - name: Build snap
        uses: snapcore/action-build@v1
        id: build

      - name: Upload snap artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-doctor-snap
          path: ${{ steps.build.outputs.snap }}
          retention-days: 7

      - name: Publish to Snap Store (Edge - Development)
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
        with:
          snap: ${{ steps.build.outputs.snap }}
          release: edge

      - name: Publish to Snap Store (Stable - Tagged Release)
        if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
        with:
          snap: ${{ steps.build.outputs.snap }}
          release: stable