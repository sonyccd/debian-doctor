name: CI Tests

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Install system dependencies
        run: |
          # Update package lists
          sudo apt-get update
          
          # Install system tools that the application might check for
          sudo apt-get install -y \
            systemd \
            net-tools \
            iproute2 \
            util-linux \
            procps \
            coreutils \
            apt-utils
          
          # Show system info for debugging
          echo "=== System Information ==="
          uname -a
          lsb_release -a || cat /etc/os-release
          echo "=== Go Version ==="
          go version
          echo "=========================="
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      
      - name: Download dependencies
        run: |
          go mod download
          go mod verify
      
      - name: Format check
        run: |
          echo "Checking code formatting..."
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå Code is not formatted. Run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi
          echo "‚úÖ Code is properly formatted"
      
      - name: Vet code
        run: |
          echo "Running go vet..."
          go vet ./...
          echo "‚úÖ go vet passed"
      
      - name: Run tests
        run: |
          echo "Running tests..."
          go test -v -race -coverprofile=coverage.out ./...
          echo "‚úÖ Tests completed"
      
      - name: Test coverage
        run: |
          echo "Checking test coverage..."
          go tool cover -func=coverage.out > coverage.txt
          
          # Calculate total coverage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total test coverage: ${COVERAGE}%"
          
          # Set coverage threshold (adjust as needed)
          THRESHOLD=70
          if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
            echo "‚úÖ Coverage meets threshold (${COVERAGE}% >= ${THRESHOLD}%)"
          else
            echo "‚ö†Ô∏è Coverage below threshold (${COVERAGE}% < ${THRESHOLD}%)"
            # Don't fail the build, just warn
          fi
          
          echo "COVERAGE_PERCENT=$COVERAGE" >> $GITHUB_ENV
      
      - name: Build application
        run: |
          echo "Building application..."
          go build -v .
          echo "‚úÖ Build successful"
          
          # Check that binary was created
          if [ -f debian-doctor ]; then
            echo "‚úÖ Binary created successfully"
            ls -la debian-doctor
          else
            echo "‚ùå Binary not found"
            exit 1
          fi
      
      - name: Test binary execution
        run: |
          echo "Testing binary execution..."
          
          # Test help command
          timeout 10s ./debian-doctor --help > help_output.txt
          if grep -q "Debian Doctor" help_output.txt; then
            echo "‚úÖ Help command works"
          else
            echo "‚ùå Help command failed"
            cat help_output.txt
            exit 1
          fi
          
          # Test version/basic functionality
          echo "Testing CLI mode..."
          timeout 10s ./debian-doctor --issue "test issue" > cli_output.txt || true
          if grep -q "Custom Issue Diagnosis" cli_output.txt; then
            echo "‚úÖ CLI mode works"
          else
            echo "‚ùå CLI mode failed"
            cat cli_output.txt
            exit 1
          fi
      
      - name: Cross-compilation test
        run: |
          echo "Testing cross-compilation..."
          
          # Test building for different architectures
          GOOS=linux GOARCH=amd64 go build -o debian-doctor-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -o debian-doctor-linux-arm64 .
          
          # Verify binaries were created
          ls -la debian-doctor-*
          echo "‚úÖ Cross-compilation successful"
      
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: matrix.go-version == '1.22' # Only upload once
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.txt
          retention-days: 30
      
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        if: matrix.go-version == '1.22' # Only upload once
        with:
          name: debian-doctor-binaries
          path: debian-doctor-*
          retention-days: 30

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
        continue-on-error: true # Don't fail the build on lint issues

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'
        continue-on-error: true
      
      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential secrets..."
          
          # Check for common secret patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.go" . | grep -E "(=|:)" | grep -v "// " | grep -v "test"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        # Test on different Ubuntu versions
        ubuntu-version: ['20.04', '22.04', 'latest']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Build and test on Ubuntu ${{ matrix.ubuntu-version }}
        run: |
          echo "Testing on Ubuntu ${{ matrix.ubuntu-version }}..."
          
          # Build the application
          go build .
          
          # Test basic functionality
          timeout 30s ./debian-doctor --help
          timeout 30s ./debian-doctor --issue "network problem"
          
          echo "‚úÖ Integration test passed on Ubuntu ${{ matrix.ubuntu-version }}"

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test, lint, security, integration]
    if: always()
    
    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
        continue-on-error: true
      
      - name: Generate summary report
        run: |
          echo "# üß™ Debian Doctor CI Test Report" > test_report.md
          echo "" >> test_report.md
          echo "**Date:** $(date)" >> test_report.md
          echo "**Commit:** ${{ github.sha }}" >> test_report.md
          echo "**Branch:** ${{ github.ref_name }}" >> test_report.md
          echo "" >> test_report.md
          echo "## Test Results Summary" >> test_report.md
          echo "" >> test_report.md
          echo "- **Unit Tests:** ${{ needs.test.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> test_report.md
          echo "- **Linting:** ${{ needs.lint.result == 'success' && '‚úÖ PASSED' || '‚ö†Ô∏è WARNINGS' }}" >> test_report.md
          echo "- **Security Scan:** ${{ needs.security.result == 'success' && '‚úÖ PASSED' || '‚ö†Ô∏è ISSUES' }}" >> test_report.md
          echo "- **Integration Tests:** ${{ needs.integration.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}" >> test_report.md
          echo "" >> test_report.md
          
          if [ -f coverage.txt ]; then
            echo "## Coverage Report" >> test_report.md
            echo "" >> test_report.md
            echo "\`\`\`" >> test_report.md
            head -20 coverage.txt >> test_report.md
            echo "\`\`\`" >> test_report.md
          fi
          
          cat test_report.md
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const testReport = fs.readFileSync('test_report.md', 'utf8');
              
              const commentBody = `${testReport}
              
              ---
              *Automated test run for commit ${{ github.sha }}*`;
              
              // Create or update comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            } catch (error) {
              console.log('Could not post test results to PR:', error.message);
            }